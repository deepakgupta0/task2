{"version":3,"file":"static/js/213.2406a5f3.chunk.js","mappings":"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","sources":["components/InvoiceWizard.js"],"sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { InvoiceContext } from \"../components/InvoiceContext\";\nimport { configurableForm } from \"./constants\";\nimport { useNavigate } from \"react-router-dom\";\nconst InvoiceWizard = () => {\n  const navigate = useNavigate();\n  const { dispatch } = useContext(InvoiceContext);\n  const [step, setStep] = useState(1);\n  const [formData, setFormData] = useState(() => {\n    let state = {};\n    configurableForm.forEach((child) => {\n      console.log(child);\n      child.children.forEach((field) => {\n        state[field.name] = field.value;\n      });\n    });\n    return state;\n  });\n  let [error, setError] = useState(\"\");\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData({ ...formData, [name]: value });\n  };\n\n  const validateForm = (formData) => {\n    const form = configurableForm[step - 1];\n    for (let i = 0; i < form.children.length; i++) {\n      const field = form.children[i];\n      const regexArray = field?.regex;\n      if (regexArray) {\n        const currentValue = formData[field.name];\n        for (let j = 0; j < regexArray.length; j++) {\n          let regex = regexArray[j];\n          console.log(regex, regex?.test(currentValue), currentValue);\n          if (regex?.test(currentValue)) {\n            setError(`Invalid ${field.name}`);\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  };\n\n  const handleNext = () => {\n    const isFormValid = validateForm(formData);\n    if (isFormValid) {\n      setStep(step + 1);\n      setError(\"\");\n    }\n  };\n  const handleBack = () => setStep(step - 1);\n  const handleSubmit = () => {\n    dispatch({ type: \"ADD_INVOICE\", payload: formData });\n    setStep(1);\n    setFormData({ name: \"\", address: \"\", date: \"\", amount: \"\", details: \"\" });\n    toast.success(\"Invoice Created Successfully\", {\n      position: \"bottom-right\",\n      closeOnClick: true,\n      pauseOnHover: false,\n    });\n    navigate(\"/\");\n  };\n\n  const generateChild = (field, index) => {\n    if (field.tag === \"input\" && field.type === \"text\") {\n      return (\n        <input\n          key={index}\n          name={field.name}\n          type={field.type}\n          placeholder={field.placeholder}\n          id={field.id}\n          value={formData[field.name]}\n          onChange={handleChange}\n          className=\"w-full mb-4 p-2 bg-gray-700 rounded\"\n        ></input>\n      );\n    } else if (field.tag === \"textarea\") {\n      return (\n        <textarea\n          key={index}\n          name={field.name}\n          type={field.type}\n          placeholder={field.placeholder}\n          id={field.id}\n          value={formData[field.name]}\n          onChange={handleChange}\n          className=\"w-full mb-4 p-2 bg-gray-700 rounded\"\n        ></textarea>\n      );\n    } else if (field.tag === \"input\" && field.type === \"date\") {\n      return (\n        <input\n          key={index}\n          name={field.name}\n          type={field.type}\n          placeholder={field.placeholder}\n          id={field.id}\n          value={formData[field.name]}\n          onChange={handleChange}\n          className=\"w-full mb-4 p-2 bg-gray-700 rounded\"\n        ></input>\n      );\n    }\n  };\n  const generateTemplate = (form, index) => {\n    const ActiveComponent = form.component;\n    return (\n      <React.Fragment key={index}>\n        <h2 className=\"text-2xl font-bold mb-4\">\n          Step {index + 1}: {form.stepName}\n        </h2>\n        <>\n          {index !== configurableForm.length - 1 ? (\n            form.children.map((field, index) => {\n              return generateChild(field, index);\n            })\n          ) : (\n            <ActiveComponent formData={formData} />\n          )}\n        </>\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <>\n      <h2 className=\"text-center font-bold text-3xl mb-4\">Create Invoice</h2>\n\n      <div className=\"p-6 bg-gray-800 text-white max-w-md mx-auto md:rounded-md md:shadow-md\">\n        {configurableForm.map((form, index) => {\n          if (index === step - 1) return generateTemplate(form, index);\n          return null;\n        })}\n        {error && <div className=\"text-red-700 font-bold mb-4\">{error}</div>}\n        <div className=\"flex justify-between\">\n          {step > 1 && (\n            <button\n              onClick={handleBack}\n              className=\"bg-gray-500 hover:bg-gray-400 text-white font-bold py-2 px-4 rounded\"\n            >\n              Back\n            </button>\n          )}\n          {step === configurableForm.length ? (\n            <button\n              onClick={handleSubmit}\n              className=\"bg-green-500 hover:bg-green-400 text-white font-bold py-2 px-4 rounded\"\n            >\n              Generate Invoice\n            </button>\n          ) : (\n            <button\n              onClick={handleNext}\n              className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 rounded\"\n            >\n              Next\n            </button>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default InvoiceWizard;\n"],"names":["InvoiceWizard","navigate","useNavigate","dispatch","useContext","InvoiceContext","step","setStep","useState","formData","setFormData","state","configurableForm","forEach","child","console","log","children","field","name","value","error","setError","handleChange","e","target","generateTemplate","form","index","ActiveComponent","component","_jsxs","React","className","stepName","_jsx","_Fragment","length","map","generateChild","tag","type","placeholder","id","onChange","onClick","handleBack","handleSubmit","payload","address","date","amount","details","toast","success","position","closeOnClick","pauseOnHover","handleNext","isFormValid","i","regexArray","regex","currentValue","j","test","concat","validateForm"],"sourceRoot":""}